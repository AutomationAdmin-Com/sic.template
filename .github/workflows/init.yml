
name: "main"

on:
  workflow_dispatch:
  # push:
  #   branches:
  #     - "develop"
  # pull_request:
  #   types: [opened, edited, synchronize]
  #   branches:
  #     - "develop"

permissions:
  id-token: write
  contents: read

jobs:
  directories:
    name: "Directory-changes"
    runs-on: ubuntu-latest
    steps:
      
      - name: "Checkout Feature Branch"
        uses: actions/checkout@v3
      
      - uses: ./.github/actions/tf-folders
        id: directories
        with:
          ignore: |
            .github/
            docs/
            source/

      - run: echo ${{ steps.directories.outputs.modules }}
    outputs:
      dirs: ${{ steps.directories.outputs.modules }}

  terraform:
    
    name: "Terraform"
    
    runs-on: ubuntu-latest
    environment: production
    
    needs: directories
    
    strategy:
      fail-fast: false
      max-parallel: 3
      matrix:
        directories: ${{ fromJson(needs.directories.outputs.dirs) }}

    defaults:
      run:
        shell: bash

    steps:
    
      - name: "Checkout Feature Branch"
        uses: actions/checkout@v3

      - name: "Echo Context"
        run: echo '${{ toJSON(github) }}'

      - name: "Parse Workflow TF Folder From Matrix"
        id: parse
        run: |
          cd $GITHUB_WORKSPACE
          chmod +x ./.github/scripts/parse.sh
          ./.github/scripts/parse.sh
        env:
          CURRENT_DIRECTORY: ${{ matrix.directories }}

      - name: "Copy Files"
        run: |
          cd $GITHUB_WORKSPACE
          echo "Copying files"
          mkdir -p ./live
          cp ./${{ matrix.directories }}/* ./live/
          cp ./source/common/${{ steps.parse.outputs.stage }}/* ./live/
          cp -R ./source/modules ./live/
          echo "File structure in root directory: "
          ls -l
          echo "File structure in terraform working directory: "
          ls -l ./live

      - name: "Azure Login"
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.CLIENT_ID }}
          tenant-id: ${{ secrets.TENANT_ID }}
          subscription-id: ${{ secrets.SUB_ID }}

      - name: "Get Github App Token"
        id: gh-app-auth
        uses: ./.github/actions/app-token
        with:
          app_id: "632563"
          private_key: ${{ secrets.REPO_BOT_PEM }}

      - name: "Update Git With Oauth Token"
        run: git config --global url."https://x-access-token:${{ steps.gh-app-auth.outputs.token }}@github.com".insteadOf ssh://git@github.com

      - name: "Download Terraform"
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.0

      - name: "Terraform Init"
        id: init
        run: |
          cd $GITHUB_WORKSPACE/live
          terraform init -backend-config="access_key=${{ secrets.ACCESS_KEY }}"
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock

      - name: "Terraform Validate"
        id: validate
        run: |
          cd $GITHUB_WORKSPACE/live
          terraform validate -no-color

      - name: "Terraform Plan"
        id: plan
        run: |
          cd $GITHUB_WORKSPACE/live
          terraform plan -out="tf.plan"
        continue-on-error: false
        env:
          TF_VAR_tenant_id: ${{ secrets.TENANT_ID }}
          TF_VAR_client_id: ${{ secrets.CLIENT_ID }}
          #TF_VAR_client_secret: ${{ secrets.CLIENT_SECRET }}
          TF_VAR_subscription_id: ${{ secrets.SUB_ID }}
          TF_VAR_hub_subscription_id: ${{ secrets.SUB_ID }}
          TF_VAR_billing_scope_id: ${{ secrets.BILLING_ID }}
          TF_VAR_pipeline: ${{ github.repository }}
          TF_VAR_requested_for: ${{ github.actor }}
          TF_INPUT: 0

      - name: "Terraform Apply"
        if: github.ref_name == 'develop' && github.event_name == 'push'
        run: |
          cd $GITHUB_WORKSPACE/live
          terraform apply -auto-approve -input=false
        continue-on-error: false
        env:
          TF_VAR_tenant_id: ${{ secrets.TENANT_ID }}
          TF_VAR_client_id: ${{ secrets.CLIENT_ID }}
          #TF_VAR_client_secret: ${{ secrets.CLIENT_SECRET }}
          TF_VAR_subscription_id: ${{ secrets.SUB_ID }}
          TF_VAR_hub_subscription_id: ${{ secrets.SUB_ID }}
          TF_VAR_billing_scope_id: ${{ secrets.BILLING_ID }}
          TF_VAR_pipeline: ${{ github.repository }}
          TF_VAR_requested_for: ${{ github.actor }}
          TF_INPUT: 0
